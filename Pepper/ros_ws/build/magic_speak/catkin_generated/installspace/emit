#!/usr/bin/env python3
'''
This node performs text-to-speech and audiofile playback.
'''
import rospy
import threading
import tempfile
import os
import Queue

from magic_speak.msg import SpeakControl
from magic_speak.msg import SpeakResult
from magic_speak.audiobank.config import LISTEN_HINT, FILENAMES

import magic_speak.driver as driver

_command_queue = Queue.Queue()
_temp = tempfile.NamedTemporaryFile('wb', suffix='.raw', delete=False)
_temp.write('magic_speak') # Check that we can write to the temp file
_temp.close()

NODE_NAME = 'magic_speak_emit'
CONTROL_TOPIC = 'speak_control'
RESULT_TOPIC = 'speak_result'
LISTEN_HINT_CONTROL_TOPIC = 'listen_control'

def ros_callback(message):
    global _command_queue
    _command_queue.put(message)

rospy.init_node(NODE_NAME)
result_publisher = rospy.Publisher(RESULT_TOPIC, SpeakResult, queue_size=10, tcp_nodelay=True)

listen_publisher = None
try:
    from magic_listen.msg import ListenControl
except:
    rospy.logwarn('magic_listen is not installed so listen hints are not available')
else:
    listen_publisher = rospy.Publisher(LISTEN_HINT_CONTROL_TOPIC, ListenControl, latch=True, tcp_nodelay=True, queue_size=10)

driver.start()
rospy.Subscriber(CONTROL_TOPIC, SpeakControl, ros_callback, tcp_nodelay=True)

while not rospy.is_shutdown():
    try:
        message = _command_queue.get(True, 0.5)

        rospy.loginfo('Speak command received')
        driver.begin_sequence()
        for speech in message.commands:
            try:
                # Handle control codes
                if speech in FILENAMES:
                    # Fixed control code to play a file
                    rospy.loginfo('Playing audio file: ' + FILENAMES[speech])        
                    driver.play_from_file(FILENAMES[speech], False)
                elif speech.startswith('@') and speech[1:].isdigit():
                    # An integer will sleep for that duration in milliseconds
                    duration = int(speech[1:]) / 1000.0
                    rospy.loginfo('Sleeping for duration: ' + str(duration))        
                    rospy.sleep(duration)
                elif speech == LISTEN_HINT and listen_publisher:
                    # A hint to start listening on the microphone
                    rospy.loginfo('Sending listen hint to magic_listen')        
                    hint = ListenControl()
                    hint.command = ListenControl.PRE_LISTEN
                    hint.id = 0
                    listen_publisher.publish(hint)
                elif speech.startswith('@'):
                    # A special extension (i.e., animations)
                    rospy.loginfo('Evaluating extension command: ' + speech)        
                    try:
                        driver.play_extension(speech)
                    except Exception as e:
                        rospy.logwarn(e.message)
                else:
                    # Otherwise, say the text directly
                    rospy.loginfo('Generating audio for sentence: ' + speech)        
                    driver.say_to_file(speech, _temp.name, message.language)
                    rospy.loginfo('Playing generated audio file: ' + _temp.name)        
                    driver.play_from_file(_temp.name, True)
            except Exception as e:
                rospy.logerr(e.message)

        rospy.loginfo('Speak command completed')
        result = SpeakResult()
        result.id = message.id
        result_publisher.publish(result)

    except Queue.Empty:
        pass

driver.stop()
if os.path.exists(_temp.name):
    os.unlink(_temp.name)