#!/usr/bin/env python3
'''
This utility will use Google to recognize audio that is being published on the /opus_frames topic.
'''
import threading
import collections

import rospy
from magic_listen.msg import ListenFrame
from magic_listen.msg import ListenControl
from magic_listen.msg import ListenResult

import magic_listen.infrastructure.opus_decoder as opus_decoder
import magic_listen.infrastructure.google_client as google_client
import magic_listen.ros.mode_map as mode_map

NODE_NAME = 'magic_listen_transcribe'
CONTROL_TOPIC = 'listen_control'
OPUS_TOPIC = 'listen_frames_compressed'
RESULT_TOPIC = 'listen_result'
MAXIMUM_BACKLOG = 100  # number of 960 sample frames to backlog (i.e., backlog of 100 = 6 seconds at 16000 hz)

_current_stream = None
_current_control = None
_current_hints = {}

_backlog_lock = threading.Lock()
_backlog = collections.deque()

rospy.init_node(NODE_NAME)
result_publisher = rospy.Publisher(RESULT_TOPIC, ListenResult, queue_size=10, latch=True, tcp_nodelay=True)


def log_error_callback(error):
    # Log Google error messages as warnings
    rospy.logwarn(error)


def make_recognition_callback(target_control):
    def callback(transcriptions, confidences):
        global _current_control, _current_stream, result_publisher
        if _current_control is target_control:
            # We've got a transcription for a request
            if len(transcriptions) > 0:
                rospy.loginfo('Google transcriptions received:')
                for i in range(len(transcriptions)):
                    rospy.loginfo(transcriptions[i].encode('utf-8') + ' (' + str(confidences[i]) + ')')
            else:
                rospy.loginfo('Empty Google transcription received')

            # Process the transcriptions
            mode = mode_map.lookup(_current_control.mode)
            result = mode.build_response(_current_control, transcriptions, confidences)
            # Label result from google
            result.origin = ListenResult.GOOGLE

            result_publisher.publish(result)
            if _current_control.command == ListenControl.LISTEN:
                if hasattr(_current_stream, 'stop'):
                    _current_stream.stop()
                _current_stream = None
                _current_control = None

    return callback


def opus_frame_callback(message):
    global _current_stream, _backlog
    stream = _current_stream
    if stream is not None and (message.id == 0 or message.id == _current_control.id):
        # Supply the audio to the
        audio = opus_decoder.decode(bytearray(message.data))
        stream.put(audio.tostring())
    elif message.id == 0:
        # Queue up the audio because we're expecting to listen
        audio = opus_decoder.decode(bytearray(message.data))
        audio_str = audio.tostring()
        with _backlog_lock:
            _backlog.append(audio_str)
            while len(_backlog) > MAXIMUM_BACKLOG:
                _backlog.popleft()


def listen_control_callback(message):
    global _current_control, _current_stream, _backlog, _current_hints
    if message.command == ListenControl.LISTEN or message.command == ListenControl.LISTEN_MANY:
        _current_control = message
        if _current_stream:
            _current_stream.stop()

        # Create a Google client
        mode = mode_map.lookup(message.mode)
        hints = _current_hints.get(mode.get_hint_key(message), [])
        _current_stream = google_client.GoogleStreamRecognizer(make_recognition_callback(message), log_error_callback, message, hints)

        # Give it the backlog of audio data
        with _backlog_lock:
            for audio_str in _backlog:
                _current_stream.put(audio_str)
            _backlog.clear()

        # Start the worker thread
        threading.Thread(target=_current_stream.worker).start()

    if message.command == ListenControl.STOP:
        if _current_control is not None and _current_control.id == message.id:
            if hasattr(_current_stream, 'stop'):
                _current_stream.stop()
            _current_stream = None
        if message.data is not None and len(message.data) > 0:
            mode = mode_map.lookup(message.mode)
            _current_hints.update(mode.build_hints(message))

opus_decoder.start()

rospy.Subscriber(OPUS_TOPIC, ListenFrame, opus_frame_callback, tcp_nodelay=True)
rospy.Subscriber(CONTROL_TOPIC, ListenControl, listen_control_callback, tcp_nodelay=True)

rospy.spin()

# Shutdown cleanly
if _current_stream:
    _current_stream.stop()
opus_decoder.stop()
